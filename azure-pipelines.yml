pool:
  vmImage: 'Ubuntu 16.04'

trigger:
  batch: true
  branches:
    include:
    - master
    - develop
    - release/*
  paths:
    exclude:
      - docs
      - README.MD

pr: 
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
      - docs
      - README.MD

variables:
  'Build.GitEmail': 'niko.kovacic2@gmail.com'
  'Build.GitUserName': 'nkovacic'

stages:
- stage: Build
  jobs:
  - job: Initial
    steps:
    - task: GitVersion@5
      displayName: 'GitVersion'
      inputs:
        runtime: 'core'

    - task: UseNode@1
      displayName: 'Install Node.js version 12.x'
      inputs:
        version: '12.x'

    - task: YarnInstaller@3
      displayName: 'Install yarn.js version 1.x'
      inputs:
        versionSpec: '1.x'

    - task: Yarn@3
      displayName: 'yarn install'
      inputs:
        arguments: 'install'

    - task: Yarn@3
      displayName: 'yarn clean'
      inputs:
        arguments: 'clean'

    - task: Yarn@3
      displayName: 'yarn build'
      inputs:
        arguments: 'build'
    # - task: Yarn@3
    #   displayName: 'yarn pretest (build)'
    #   inputs:
    #     arguments: 'pretest'
    # - task: Yarn@3
    #   displayName: 'yarn test'
    #   inputs:
    #     arguments: 'test'
    - task: PowerShell@2
      displayName: 'Create .npmrc'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))
      inputs:
        targetType: inline
        script: "$text = '//registry.npmjs.org/:_authToken=$(Build.NpmAuthToken)'; $text > '.npmrc'"
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Setup git'
      #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))
      inputs:
        targetType: inline
        script: 'git config --global user.email "$(Build.GitEmail)";
         git config --global user.name "$(Build.GitUserName)";
         $repository = $env:BUILD_REPOSITORY_URI;
         $githubPat = -join($env:BUILD_GITHUBPAT, "@");
         $repository = $repository.Insert($repository.IndexOf("github"), $githubPat);
         git remote rm origin;
         git remote add origin $repository;'
        failOnStderr: true

    - task: Yarn@3
      displayName: 'yarn release:version'
      #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))
      inputs:
        arguments: 'release:version $(GitVersion.SemVer)'

    - task: Yarn@3
      displayName: 'yarn release:manual'
      #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))
      inputs:
        arguments: 'release:manual'
    